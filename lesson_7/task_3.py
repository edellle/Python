# Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
# умножение и обычное (не целочисленное) деление клеток, соответственно.
# В методе деления должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
# иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n*****.

class Cell:
    def __init__(self, count):
        self.count = count

    def __add__(self, other):
        return self.count + other.count

    def __sub__(self, other):
        if abs(self.count - other.count) > 0:
            return self.count - other.count
        else:
            return 'Нельзя выполнить вычитание'

    def __mul__(self, other):
        return Cell(self.count * other.count)

    def __truediv__(self, other):
        return Cell(self.count / other.count)

    def make_order (self, in_row):
        all_count = self.count
        result = ''
        while True:
            i = in_row
            temp = ''
            while i > 0:
                temp += '*'
                i -= 1
                all_count -= 1
                if all_count == 0:
                    result += temp
                    return result
            result += temp + '\n'


cell_1 = Cell (20)
cell_2 = Cell (20)
cell_3 = Cell (15)

# получаем результат сложения
print (cell_1 + cell_2)
# вычитание выполнить нельзя
print (cell_1 - cell_2)
# получаем результат вычитания
print (cell_1 - cell_3)
# Перегрузка применяется только к клеткам. Тут в результате видим 0
print (16 - 16)

cell_mul = cell_1 * cell_3
cell_div = cell_1 / cell_3

print ('\nразбивка клетки на 20 по 4 в ряду')
print(cell_1.make_order(4))

print ('\nРазбивка клетки на 20 по 6 в ряду')
print(cell_1.make_order(6))

